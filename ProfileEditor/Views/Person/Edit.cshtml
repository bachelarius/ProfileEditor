@model ProfileEditor.Models.PersonVm

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>PersonVm</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="EmailAddress" class="control-label"></label>
                <input asp-for="EmailAddress" class="form-control" />
                <span asp-validation-for="EmailAddress" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PhoneNumber" class="control-label"></label>
                <input asp-for="PhoneNumber" class="form-control" />
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DateOfBirth" class="control-label"></label>
                <input asp-for="DateOfBirth" class="form-control" />
                <span asp-validation-for="DateOfBirth" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Gender" class="control-label"></label>
                <input asp-for="Gender" class="form-control" />
                <span asp-validation-for="Gender" class="text-danger"></span>
            </div>
            <div class="form-group mt-3">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
    
    <div class="col-md-4">
        <partial name="_ProfilePictureDisplay" model="@Model.Id" />
        
        <form asp-action="UploadPicture" asp-route-id="@Model.Id" method="post" enctype="multipart/form-data">
            <div class="mb-3">
                <input type="file" id="imageUpload_Image" name="imageUpload.Image" 
                       class="form-control" 
                       accept="image/*"
                       data-val="true"
                       data-val-required="Please select an image file."
                       data-val-maxfilesize="File size must not exceed 5MB"
                       data-val-maxfilesize-max="5242880"
                       data-val-allowedextensions="Only .jpg, .jpeg, .png, and .gif files are allowed"
                       data-val-allowedextensions-extensions=".jpg,.jpeg,.png,.gif" />
                <span class="text-danger field-validation-valid" 
                      data-valmsg-for="imageUpload.Image" 
                      data-valmsg-replace="true"></span>
            </div>
            <button type="submit" class="btn btn-secondary">Upload New Picture</button>
        </form>
        
        <form asp-action="DeletePicture" asp-route-id="@Model.Id" method="post" class="mt-2">
            <button type="submit" class="btn btn-danger">Remove Picture</button>
        </form>
    </div>
</div>

<div class="mt-3">
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        $.validator.addMethod('maxfilesize', function (value, element, param) {
            if (element.files.length > 0) {
                return element.files[0].size <= param;
            }
            return true; // No file selected is handled by required validation
        });

        $.validator.addMethod('allowedextensions', function (value, element, param) {
            if (element.files.length > 0) {
                var extension = value.toLowerCase().split('.').pop();
                var extensions = param.toLowerCase().split(',');
                return extensions.includes('.' + extension);
            }
            return true; // No file selected is handled by required validation
        });

        $.validator.unobtrusive.adapters.add('maxfilesize', ['max'], function (options) {
            options.rules['maxfilesize'] = parseInt(options.params.max);
            options.messages['maxfilesize'] = options.message;
        });

        $.validator.unobtrusive.adapters.add('allowedextensions', ['extensions'], function (options) {
            options.rules['allowedextensions'] = options.params.extensions;
            options.messages['allowedextensions'] = options.message;
        });
    </script>
}
